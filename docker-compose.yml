version: "3.9"

services:
  traefik:
      image: traefik:v2.11
      command:
        - --api.insecure=true
        - --providers.docker=true
        - --entrypoints.web.address=:80
      ports:
        - "${HTTP_PORT}:80"                
        - "${TRAEFIK_DASHBOARD_PORT}:8080"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
  db:
    image: postgis/postgis:15-3.3
    container_name: postgres_container
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      DATABASE_USER: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DB_PORT: '5432'
      BACKEND_PORT: ${BACKEND_PORT}
    volumes:
      - ./backend/src:/app/src
    command: >
      sh -c "python manage.py migrate && 
            python manage.py runserver 0.0.0.0:${BACKEND_PORT}"
    labels:
      - "traefik.http.routers.backend.rule=Host(`api.docker.localhost`)"
      - "traefik.http.services.backend.loadbalancer.server.port=${BACKEND_PORT}"
      - "traefik.http.routers.backend.entrypoints=web"

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend_web
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    labels:
      - "traefik.http.routers.web.rule=Host(`web.docker.localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.web.entrypoints=web"

  admin:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend_admin
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev:admin"]
    labels:
      - "traefik.http.routers.admin.rule=Host(`admin.docker.localhost`)"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"
      - "traefik.http.routers.admin.entrypoints=web"

  ecoponto:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend_ecoponto
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev:ecoponto"]
    labels:
      - "traefik.http.routers.ecoponto.rule=Host(`ecoponto.docker.localhost`)"
      - "traefik.http.services.ecoponto.loadbalancer.server.port=3000"
      - "traefik.http.routers.ecoponto.entrypoints=web"

volumes:
  db_data:
